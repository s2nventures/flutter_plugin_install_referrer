// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package fr.g123k.install_referrer;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class InstallReferrerPigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum IRInstallationType {
    APP_STORE(0),
    TEST(1),
    DEBUG(2),
    UNKNOWN(3);

    final int index;

    IRInstallationType(final int index) {
      this.index = index;
    }
  }

  public enum IRInstallationPlatform {
    APPLE_APP_STORE(0),
    APPLE_TESTFLIGHT(1),
    GOOGLE_PLAY(2),
    AMAZON_APP_STORE(3),
    HUAWEI_APP_GALLERY(4),
    OPPO_APP_MARKET(5),
    SAMSUNG_APP_SHOP(6),
    VIVO_APP_STORE(7),
    XIAOMI_APP_STORE(8),
    MANUALLY(9),
    UNKNOWN(10);

    final int index;

    IRInstallationPlatform(final int index) {
      this.index = index;
    }
  }

  public enum IRPlatform {
    IOS(0),
    ANDROID(1),
    MACOS(2);

    final int index;

    IRPlatform(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class IRInstallationReferer {
    private @Nullable IRInstallationType type;

    public @Nullable IRInstallationType getType() {
      return type;
    }

    public void setType(@Nullable IRInstallationType setterArg) {
      this.type = setterArg;
    }

    private @Nullable IRInstallationPlatform installationPlatform;

    public @Nullable IRInstallationPlatform getInstallationPlatform() {
      return installationPlatform;
    }

    public void setInstallationPlatform(@Nullable IRInstallationPlatform setterArg) {
      this.installationPlatform = setterArg;
    }

    private @Nullable IRPlatform platform;

    public @Nullable IRPlatform getPlatform() {
      return platform;
    }

    public void setPlatform(@Nullable IRPlatform setterArg) {
      this.platform = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      IRInstallationReferer that = (IRInstallationReferer) o;
      return Objects.equals(type, that.type) && Objects.equals(installationPlatform, that.installationPlatform) && Objects.equals(platform, that.platform) && Objects.equals(packageName, that.packageName);
    }

    @Override
    public int hashCode() {
      return Objects.hash(type, installationPlatform, platform, packageName);
    }

    public static final class Builder {

      private @Nullable IRInstallationType type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@Nullable IRInstallationType setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable IRInstallationPlatform installationPlatform;

      @CanIgnoreReturnValue
      public @NonNull Builder setInstallationPlatform(@Nullable IRInstallationPlatform setterArg) {
        this.installationPlatform = setterArg;
        return this;
      }

      private @Nullable IRPlatform platform;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlatform(@Nullable IRPlatform setterArg) {
        this.platform = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      public @NonNull IRInstallationReferer build() {
        IRInstallationReferer pigeonReturn = new IRInstallationReferer();
        pigeonReturn.setType(type);
        pigeonReturn.setInstallationPlatform(installationPlatform);
        pigeonReturn.setPlatform(platform);
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(type);
      toListResult.add(installationPlatform);
      toListResult.add(platform);
      toListResult.add(packageName);
      return toListResult;
    }

    static @NonNull IRInstallationReferer fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      IRInstallationReferer pigeonResult = new IRInstallationReferer();
      Object type = pigeonVar_list.get(0);
      pigeonResult.setType((IRInstallationType) type);
      Object installationPlatform = pigeonVar_list.get(1);
      pigeonResult.setInstallationPlatform((IRInstallationPlatform) installationPlatform);
      Object platform = pigeonVar_list.get(2);
      pigeonResult.setPlatform((IRPlatform) platform);
      Object packageName = pigeonVar_list.get(3);
      pigeonResult.setPackageName((String) packageName);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129: {
          Object value = readValue(buffer);
          return value == null ? null : IRInstallationType.values()[((Long) value).intValue()];
        }
        case (byte) 130: {
          Object value = readValue(buffer);
          return value == null ? null : IRInstallationPlatform.values()[((Long) value).intValue()];
        }
        case (byte) 131: {
          Object value = readValue(buffer);
          return value == null ? null : IRPlatform.values()[((Long) value).intValue()];
        }
        case (byte) 132:
          return IRInstallationReferer.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof IRInstallationType) {
        stream.write(129);
        writeValue(stream, value == null ? null : ((IRInstallationType) value).index);
      } else if (value instanceof IRInstallationPlatform) {
        stream.write(130);
        writeValue(stream, value == null ? null : ((IRInstallationPlatform) value).index);
      } else if (value instanceof IRPlatform) {
        stream.write(131);
        writeValue(stream, value == null ? null : ((IRPlatform) value).index);
      } else if (value instanceof IRInstallationReferer) {
        stream.write(132);
        writeValue(stream, ((IRInstallationReferer) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface InstallReferrerInternalAPI {

    void detectReferrer(@NonNull Result<IRInstallationReferer> result);

    /** The codec used by InstallReferrerInternalAPI. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `InstallReferrerInternalAPI` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable InstallReferrerInternalAPI api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable InstallReferrerInternalAPI api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.install_referrer.InstallReferrerInternalAPI.detectReferrer" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<IRInstallationReferer> resultCallback =
                    new Result<IRInstallationReferer>() {
                      public void success(IRInstallationReferer result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.detectReferrer(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
